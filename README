# xv6-riscv-compress

**xv6-riscv-compress** is a modification of the **xv6-riscv** OS that adds file compression (using RLE) on write and decompression on read, with **RLU-based** synchronization for efficient concurrency. It is designed for the RISC-V architecture, aiming to optimize storage and can be extended to support advanced compression algorithms.

## Prerequisites

Before setting up **xv6-riscv-compress**, ensure that you have the following installed:

- **Git** to clone the repository
- **RISC-V Toolchain** for cross-compiling (GCC, binutils, etc.)
- **QEMU** for running the virtual machine (VM) emulator
- **Make** for building the project

For installation instructions, follow the respective sections based on your operating system.

---

## Installation Instructions

### 1. macOS

1. **Install Homebrew** (if not already installed):
   ```bash
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   ```
2. **Install dependencies:**
    ```bash
    brew install riscv-gnu-toolchain qemu make
    ```
3. **Clone the repository**
    ```bash
    git clone https://github.com/your-username/xv6-riscv-compress.git
    cd xv6-riscv-compress
    ```
4. **Build the project:**
    ```bash
    make
    ```
5. **Run the OS in QEMU**
    ```bash
    make qemu
    ```
### 2. Linux

1. **Install dependencies (Ubuntu/Debian example):**
```bash
sudo apt update
sudo apt install build-essential gcc make qemu riscv64-unknown-elf-gcc
```
2. **Clone the repossitory**
```bash
git clone https://github.com/your-username/xv6-riscv-compress.git
cd xv6-riscv-compress
```
3. **Build the project:**
```bash
make
```
4. **Run the OS in QEMU**
```bash
make qemu
```  
## 3. Windows
1. **Install WSL (Windows Subsystem for Linux):**
    - Follow the instructions on [Microsoft's website](https://learn.microsoft.com/en-us/windows/wsl/install) to install WSL.
2. **Install Ubuntu or another Linux distribution from the Microsoft Store.**
3. **Clone the repossitory**
```bash
git clone https://github.com/your-username/xv6-riscv-compress.git
cd xv6-riscv-compress
```
4. **Build the project:**
```bash
make
```
5. **Run the OS in QEMU**
```bash
make qemu
```
## Customizing Compression
Currently, Run-Length Encoding (RLE) is used for compression. You can modify this to support more advanced compression algorithms (e.g., zlib, LZ4) by editing the relevant sections of the code in the file system implementation.

## Troubleshooting
- "Command not found" errors:
    
    - Ensure that the RISC-V toolchain and QEMU are installed correctly.
    - Double-check that the correct version of make is available.
- QEMU errors:
     - Verify that you are using a compatible version of QEMU. Try updating QEMU with brew update on macOS or sudo apt upgrade qemu on Linux.
     - Check if the QEMU version supports the RISC-V architecture.
 - Compilation errors:
    - Ensure all dependencies are installed, and the build environment is set up correctly.
    - Run make clean and try rebuilding if you encounter issues.

## Acknowledgments
- xv6: The base operating system from MIT's RISC-V implementation.
- QEMU: The emulator used to run the RISC-V architecture.

